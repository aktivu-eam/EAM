<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_392987_eam_work_order</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_392987_eam_work_order">checklist_blueprintVALCHANGES^EQ<item endquery="false" field="checklist_blueprint" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Checklist Queue</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var checklistData = JSON.parse(current.getValue('checklist_blueprint'));
	var preChecklistDetails = checklistData.pre_checklist.checklists.ruleDetails;
	var workingChecklistDetails = checklistData.working_checklist.checklists.ruleDetails;
	var preCompleted = checklistData.pre_checklist.completed;
	var workingCompleted = checklistData.working_checklist.completed;
	var preOrWorking = 'na';
	
	//Check if pre exist, if yes then update
	if(preChecklistDetails.length>0){
		preOrWorking = 'pre';
		retrieveQuestionsDetails(preChecklistDetails,preOrWorking);
	}
	//Check if working exist, if yes then update
	if(workingChecklistDetails.length>0){
		preOrWorking = 'working';
		retrieveQuestionsDetails(workingChecklistDetails,preOrWorking);
	}

	//Retrive questions details from checklist blueprint to update to checklist queue records
	function retrieveQuestionsDetails(checklist,preOrWorking){
		for (var ruleDetail=0; ruleDetail<checklist.length; ruleDetail++) {
			var thisRuleDetail = checklist[ruleDetail];
			for (var question=0; question<thisRuleDetail.questions.length; question++) {
				var thisQuestion = thisRuleDetail.questions[question];
				var checklist_details  = checklist[ruleDetail].questions[question].detailId;
				updateChecklistQueue(thisQuestion,checklist_details,preOrWorking);
			}
		}
	}	

	//Update Checklist Queue Record for a question
	function updateChecklistQueue(question,checklist_details,preOrWorking){
		var updateQueue= new GlideRecord('x_392987_eam_work_order_checklist_queue');
		updateQueue.addQuery('work_order',current.sys_id);
		updateQueue.addQuery('checklist_detail',checklist_details);
		updateQueue.addQuery('state','!=',3);
		updateQueue.query();
		if(updateQueue.next()){
			var questionType = question.type;
			if(questionType == '1'){
				updateQueue.pass_fail_answer = question.value;
			} else if(questionType == '2'){
				updateQueue.answer= question.value;
				//updateQueue.u_freetext_answer = question.value;
			} else {
				updateQueue.yes_no_answer = question.value;
			}			
			//Update the confirm flag when completed is true
			//Recapturing as Defect fixes on 04Dec2017
			if(preOrWorking == 'pre' && preCompleted){
				updateQueue.confirm = true;
			}			
			if(preOrWorking == 'working' && workingCompleted){
				updateQueue.confirm = true;
			}			
			updateQueue.update();
		}
	}
	

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-28 06:26:09</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6cf0842ddb2333001795d1b1ca9619d6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Checklist Queue</sys_name>
        <sys_overrides/>
        <sys_package display_value="Enterprise Asset Management" source="x_392987_eam">2cd717a8dbdb3300f318fbef2996195f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Enterprise Asset Management">2cd717a8dbdb3300f318fbef2996195f</sys_scope>
        <sys_update_name>sys_script_6cf0842ddb2333001795d1b1ca9619d6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-28 06:26:09</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6cf0842ddb2333001795d1b1ca9619d6"/>
</record_update>
